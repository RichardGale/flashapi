#if !defined(FLEX11_6_FLASH_EVENTS_MOUSEEVENT_AS)
#define FLEX11_6_FLASH_EVENTS_MOUSEEVENT_AS
#if defined(__cplusplus)


#include "flex11.6.h"
namespace flash
{
    namespace display
    {
        class InteractiveObject;
    }
}
#include "flash/events/Event.h"

/// @eventType  flash.events.MouseEvent.CLICK
//[Event(name="click",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.CONTEXT_MENU
//[Event(name="contextMenu",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.DOUBLE_CLICK
//[Event(name="doubleClick",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MIDDLE_CLICK
//[Event(name="middleClick",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MIDDLE_MOUSE_DOWN
//[Event(name="middleMouseDown",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MIDDLE_MOUSE_UP
//[Event(name="middleMouseUp",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MOUSE_DOWN
//[Event(name="mouseDown",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MOUSE_MOVE
//[Event(name="mouseMove",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MOUSE_OUT
//[Event(name="mouseOut",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MOUSE_OVER
//[Event(name="mouseOver",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MOUSE_UP
//[Event(name="mouseUp",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.MOUSE_WHEEL
//[Event(name="mouseWheel",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.RIGHT_CLICK
//[Event(name="rightClick",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.RIGHT_MOUSE_DOWN
//[Event(name="RightMouseDown",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.RIGHT_MOUSE_UP
//[Event(name="rightMouseUp",type="flash.events.MouseEvent")]

/// @eventType  flash.events.MouseEvent.ROLL_OUT
//[Event(name="rollOut",type="flash.events.MouseEvent")]


//[Event(name="rollOver",type="flash.events.MouseEvent")]

using namespace flash::display;
using namespace flash::events;

namespace flash
{
    namespace events
    {
        /// @eventType  flash.events.MouseEvent.ROLL_OVER


        /**
         * A MouseEvent object is dispatched into the event flow whenever mouse events occur.
         * A mouse event is usually generated by a user input device, such as a mouse or a trackball,
         * that uses a pointer.
         *
         *   <p class="- topic/p ">When nested nodes are involved, mouse events target the deepest possible nested node that
         * is visible in the display list. This node is called the <i class="+ topic/ph hi-d/i ">target node</i>. To have a
         * target node's ancestor receive notification of a mouse event, use
         * <codeph class="+ topic/ph pr-d/codeph ">EventDispatcher.addEventListener()</codeph> on the ancestor node with the
         * <codeph class="+ topic/ph pr-d/codeph ">type</codeph> parameter set to the specific mouse event you want to detect.</p>
         *
         *   EXAMPLE:
         *
         *   The following example uses the <codeph class="+ topic/ph pr-d/codeph ">MouseEventExample</codeph> and
         * <codeph class="+ topic/ph pr-d/codeph ">ChildSprite</codeph> classes to show how mouse events are dispatched using a simple image.
         * This example carries out the following tasks:
         * <ol class="- topic/ol "><li class="- topic/li ">The example declares properties for the size (100 x 100 pixels) and the background color
         * (orange) for later use in drawing the square.</li><li class="- topic/li ">The constructor creates a new ChildSprite object <codeph class="+ topic/ph pr-d/codeph ">child</codeph>. Its constructor first
         * draws an orange 100 x 100 pixel square at coordinates (0,0) by calling its <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph>
         * method and then adds seven event listeners/subscribers.
         * <ul class="- topic/ul "><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">click</codeph>/<codeph class="+ topic/ph pr-d/codeph ">clickHandler()</codeph>: Dispatched when the user single-clicks with the left mouse button
         * over the square.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">doubleClick</codeph>/<codeph class="+ topic/ph pr-d/codeph ">doubleClickHandler()</codeph>: Dispatched when the user double-clicks the left mouse button
         * over the square.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseDown</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseDownHandler()</codeph>: When the ChildSprite
         * object (the orange square) is clicked, a <codeph class="+ topic/ph pr-d/codeph ">trace()</codeph> message is printed to the screen, and then
         * <codeph class="+ topic/ph pr-d/codeph ">ChildSprite.draw()</codeph> is called, which draws a dark yellow square in place
         * of the light blue one drawn in <codeph class="+ topic/ph pr-d/codeph ">mouseOverHandler()</codeph>.  The <codeph class="+ topic/ph pr-d/codeph ">mouseDownHandler()</codeph> method also adds a
         * <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph>event listener and the <codeph class="+ topic/ph pr-d/codeph ">mouseMoveHandler()</codeph> subscriber (described below),
         * which processes the mouse moves.  Then the <codeph class="+ topic/ph pr-d/codeph ">startDrag()</codeph> method is called, which
         * allows the Sprite object to be dragged.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseOut</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseOutHandler()</codeph>: Dispatched whenever the pointer leaves the
         * square area.  The <codeph class="+ topic/ph pr-d/codeph ">draw()</codeph> method is called to return the square to its normal
         * size and color.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseOver</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseOverHandler()</codeph>: Dispatched when the mouse pointer is over the square.
         * This method redraws the square so that it is larger and its background color is dark yellow.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseUp</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseUpHandler()</codeph>: When the user releases the mouse button, the <codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph>
         * event listener is removed and <codeph class="+ topic/ph pr-d/codeph ">stopDrag</codeph> is called, which freezes the square in place.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseMove</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseMoveHandler()</codeph>: Called as part of the <codeph class="+ topic/ph pr-d/codeph ">mouseDownHandler()</codeph> function, and dispatched when the user is pressing the left mouse button and dragging the square.</li><li class="- topic/li "><codeph class="+ topic/ph pr-d/codeph ">mouseWheel</codeph>/<codeph class="+ topic/ph pr-d/codeph ">mouseWheelHandler()</codeph>: Dispatched when the user rotates the mouse
         * wheel over the square.</li></ul></li><li class="- topic/li ">The ChildSprite instance <codeph class="+ topic/ph pr-d/codeph ">child</codeph> is then added to the display list by means of
         * <codeph class="+ topic/ph pr-d/codeph ">addChild()</codeph>, which promptly draws the orange square.</li></ol><p class="- topic/p "><b class="+ topic/ph hi-d/b ">Notes: </b></p><ul class="- topic/ul "><li class="- topic/li ">The <codeph class="+ topic/ph pr-d/codeph ">MouseEventExample</codeph> class should be the document root.</li><li class="- topic/li ">Some of the event methods listed above declare a local variable <codeph class="+ topic/ph pr-d/codeph ">sprite</codeph>, which
         * is assigned the cast of <codeph class="+ topic/ph pr-d/codeph ">event.target</codeph> to type Sprite.</li></ul><codeblock xml:space="preserve" class="+ topic/pre pr-d/codeblock ">
         * package {
         * import flash.display.Sprite;
         *
         *   public class MouseEventExample extends Sprite {
         * private var size:uint = 100;
         * private var bgColor:uint = 0xFFCC00;
         *
         *   public function MouseEventExample() {
         * var child:ChildSprite = new ChildSprite();
         * addChild(child);
         * }
         * }
         * }
         *
         *   import flash.display.Sprite;
         * import flash.events.MouseEvent;
         *
         *   class ChildSprite extends Sprite {
         * private var size:uint = 50;
         * private var overSize:uint = 60;
         * private var backgroundColor:uint = 0xFFCC00;
         * private var overColor:uint = 0xCCFF00;
         * private var downColor:uint = 0x00CCFF;
         *
         *   public function ChildSprite() {
         * draw(size, size, backgroundColor);
         * doubleClickEnabled = true;
         * addEventListener(MouseEvent.CLICK, clickHandler);
         * addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
         * addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
         * addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
         * addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
         * addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
         * addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
         * }
         *
         *   private function draw(w:uint, h:uint, bgColor:uint):void {
         * graphics.clear();
         * graphics.beginFill(bgColor);
         * graphics.drawRect(0, 0, w, h);
         * graphics.endFill();
         * }
         *
         *   private function clickHandler(event:MouseEvent):void {
         * trace("clickHandler");
         * }
         *
         *   private function doubleClickHandler(event:MouseEvent):void {
         * trace("doubleClickHandler");
         * }
         *
         *   private function mouseDownHandler(event:MouseEvent):void {
         * trace("mouseDownHandler");
         * draw(overSize, overSize, downColor);
         *
         *   var sprite:Sprite = Sprite(event.target);
         * sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
         * sprite.startDrag();
         * }
         *
         *   private function mouseMoveHandler(event:MouseEvent):void {
         * trace("mouseMoveHandler");
         * event.updateAfterEvent();
         * }
         *
         *   private function mouseOutHandler(event:MouseEvent):void {
         * trace("mouseOutHandler");
         * draw(size, size, backgroundColor);
         * }
         *
         *   private function mouseOverHandler(event:MouseEvent):void {
         * trace("mouseOverHandler");
         * draw(overSize, overSize, overColor);
         * }
         *
         *   private function mouseWheelHandler(event:MouseEvent):void {
         * trace("mouseWheelHandler delta: " + event.delta);
         * }
         *
         *   private function mouseUpHandler(event:MouseEvent):void {
         * trace("mouseUpHandler");
         * var sprite:Sprite = Sprite(event.target);
         * sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
         * sprite.stopDrag();
         * draw(overSize, overSize, overColor);
         * }
         * }
         * </codeblock>
         * @langversion 3.0
         * @playerversion   Flash 9
         * @playerversion   Lite 4
         */
        class MouseEvent : public flash::events::Event
        {
            /**
             * Defines the value of the type property of a click event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDownFor click events, this value is always false.cancelablefalse; there is no default behavior to cancel.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string CLICK;

            /**
             * Defines the value of the type property of a doubleClick event object. The doubleClickEnabled property
             * must be true for an object to generate the doubleClick event.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDownFor double-click events, this value is always false.cancelablefalse; there is no default behavior to cancel.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string DOUBLE_CLICK;

            /**
             * Defines the value of the type property of a mouseDown event object.
             * This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows and Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string MOUSE_DOWN;

            /**
             * Defines the value of the type property of a mouseMove event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string MOUSE_MOVE;

            /**
             * Defines the value of the type property of a mouseOut event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.relatedObjectThe display list object to which the pointing device now points.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string MOUSE_OUT;

            /**
             * Defines the value of the type property of a mouseOver event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.relatedObjectThe display list object to which the pointing device was pointing.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string MOUSE_OVER;

            /**
             * Defines the value of the type property of a mouseUp event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string MOUSE_UP;
        public:
            static const std::string RELEASE_OUTSIDE;

            /**
             * Defines the value of the type property of a mouseWheel event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.deltaThe number of lines that that each notch on the mouse wheel represents.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             */
        public:
            static const std::string MOUSE_WHEEL;

            /**
             * Defines the value of the type property of a rollOut event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblesfalsebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; there is no default behavior to cancel.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.relatedObjectThe display list object to which the pointing device now points.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string ROLL_OUT;

            /**
             * Defines the value of the type property of a rollOver event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblesfalsebuttonDowntrue if the primary mouse button is pressed; false otherwise.cancelablefalse; there is no default behavior to cancel.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.relatedObjectThe display list object to which the pointing device was pointing.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            static const std::string ROLL_OVER;

            /**
             * Defines the value of the type property of a middleClick event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDownFor middle-click events, this property is always false.cancelablefalse; there is no default behavior to cancel.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string MIDDLE_CLICK;

            /**
             * Defines the value of the type property of a middleMouseDown event object.
             * This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the middle mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string MIDDLE_MOUSE_DOWN;

            /**
             * Defines the value of the type property of a middleMouseUp event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the middle mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string MIDDLE_MOUSE_UP;

            /**
             * Defines the value of the type property of a rightClick event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDownFor right-click events, this property is always false.cancelablefalse; there is no default behavior to cancel.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string RIGHT_CLICK;

            /**
             * Defines the value of the type property of a rightMouseDown event object.
             * This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDownFor right-click events, this property is always true.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string RIGHT_MOUSE_DOWN;

            /**
             * Defines the value of the type property of a rightMouseUp event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the right mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string RIGHT_MOUSE_UP;

            /**
             * The MouseEvent.CONTEXT_MENU constant defines the value of the
             * type property of a contextMenu event object.
             *
             *   This event has the following properties:PropertyValuealtKeytrue if the Alt key is active (Windows).bubblestruebuttonDowntrue if the right mouse button is pressed; false otherwise.cancelablefalse; the default behavior cannot be canceled.commandKeytrue on the Mac if the Command key is active; false if it is inactive. Always false on Windows.controlKeytrue if the Ctrl or Control key is active; false if it is inactive.ctrlKeytrue on Windows or Linux if the Ctrl key is active. true on Mac if either the Ctrl key or the Command key is active. Otherwise, false.currentTargetThe object that is actively processing the Event
             * object with an event listener.localXThe horizontal coordinate at which the event occurred relative to the containing sprite.localYThe vertical coordinate at which the event occurred relative to the containing sprite.shiftKeytrue if the Shift key is active; false if it is inactive.clickCountCount of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.stageXThe horizontal coordinate at which the event occurred in global stage coordinates.stageYThe vertical coordinate at which the event occurred in global stage coordinates.targetThe InteractiveObject instance under the pointing device.
             * The target is not always the object in the display list
             * that registered the event listener. Use the currentTarget
             * property to access the object in the display list that is currently processing the event.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Lite 4
             */
        public:
            static const std::string CONTEXT_MENU;

            /**
             * The horizontal coordinate at which the event occurred relative to the containing sprite.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            float        localX();
        public:
            void         localX(float value);

            /**
             * The vertical coordinate at which the event occurred relative to the containing sprite.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            float        localY();
        public:
            void         localY(float value);

            /**
             * A reference to a display list object that is related to the event. For example, when a mouseOut event occurs,
             * relatedObject represents the display list object to which the pointing device now points.
             * This property applies to the mouseOut, mouseOver, rollOut, and rollOver events.
             * The value of this property can be null in two circumstances: if there no related object,
             * or there is a related object, but it is in a security sandbox to which you don't have access.
             * Use the isRelatedObjectInaccessible() property to determine which of these reasons applies.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            flash::display::InteractiveObject *relatedObject();
        public:
            void         relatedObject(InteractiveObject *value);

            /**
             * On Windows or Linux, indicates whether the Ctrl key is active (true) or inactive (false).
             * On Macintosh, indicates whether either the Control key or the Command key is activated.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            bool         ctrlKey();
        public:
            void         ctrlKey(bool value);

            /**
             * Indicates whether the Alt key is active (true) or inactive (false).
             * Supported for Windows only. On other operating systems, this property is always set to false.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             * @internal    Reserved in case Desktop Player wants to capture this key in a future implementation.
             *   The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
             *   only the Windows version is hooked up.
             */
        public:
            bool         altKey();
        public:
            void         altKey(bool value);

            /**
             * Indicates whether the Shift key is active (true) or inactive
             * (false).
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            bool         shiftKey();
        public:
            void         shiftKey(bool value);

            /**
             * Indicates whether the primary mouse button is pressed (true) or not (false).
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            bool         buttonDown();
        public:
            void         buttonDown(bool value);

            /**
             * Indicates how many lines should be scrolled for each unit the user rotates the
             * mouse wheel. A positive delta value indicates an upward scroll; a negative
             * value indicates a downward scroll. Typical values are 1 to 3, but faster
             * rotation may produce larger values. This setting depends on the device
             * and operating system and is usually configurable by the user. This
             * property applies only to the MouseEvent.mouseWheel event.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            int          delta();
        public:
            void         delta(int value);

            /**
             * The horizontal coordinate at which the event occurred in global Stage coordinates.
             * This property is calculated when the localX property is set.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            float        stageX();

            /**
             * The vertical coordinate at which the event occurred in global Stage coordinates.
             * This property is calculated when the localY property is set.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            float        stageY();

            /**
             * If true, the relatedObject property is set to null for
             * reasons related to security sandboxes.  If the nominal value of relatedObject is a reference to a
             * DisplayObject in another sandbox, relatedObject is set to
             * null unless there is permission in both directions across this sandbox boundary.  Permission is
             * established by calling Security.allowDomain() from a SWF file, or by providing
             * a policy file from the server of an image file, and setting the LoaderContext.checkPolicyFile
             * property when loading the image.
             * @langversion 3.0
             * @playerversion   Flash 10
             * @playerversion   Lite 4
             */
        public:
            bool         isRelatedObjectInaccessible();
        public:
            void         isRelatedObjectInaccessible(bool value);

        public:
            float        movementX();
        public:
            void         movementX(float value);

        public:
            float        movementY();
        public:
            void         movementY(float value);

            /**
             * Creates an Event object that contains information about mouse events.
             * Event objects are passed as parameters to event listeners.
             * @param   type    The type of the event. Possible values are: MouseEvent.CLICK,
             *   MouseEvent.DOUBLE_CLICK, MouseEvent.MOUSE_DOWN,
             *   MouseEvent.MOUSE_MOVE, MouseEvent.MOUSE_OUT,
             *   MouseEvent.MOUSE_OVER, MouseEvent.MOUSE_UP,
             *   MouseEvent.MIDDLE_CLICK, MouseEvent.MIDDLE_MOUSE_DOWN, MouseEvent.MIDDLE_MOUSE_UP,
             *   MouseEvent.RIGHT_CLICK, MouseEvent.RIGHT_MOUSE_DOWN, MouseEvent.RIGHT_MOUSE_UP,
             *   MouseEvent.MOUSE_WHEEL, MouseEvent.ROLL_OUT, and MouseEvent.ROLL_OVER.
             * @param   bubbles Determines whether the Event object participates in the bubbling phase of the event flow.
             * @param   cancelable  Determines whether the Event object can be canceled.
             * @param   localX  The horizontal coordinate at which the event occurred relative to the containing sprite.
             * @param   localY  The vertical coordinate at which the event occurred relative to the containing sprite.
             * @param   relatedObject   The complementary InteractiveObject instance that is affected by the event. For example, when a mouseOut event occurs, relatedObject represents the display list object to which the pointing device now points.
             * @param   ctrlKey On Windows or Linux, indicates whether the Ctrl key is activated. On Mac, indicates whether either the Ctrl key or the Command key is activated.
             * @param   altKey  Indicates whether the Alt key is activated (Windows or Linux only).
             * @param   shiftKey    Indicates whether the Shift key is activated.
             * @param   buttonDown  Indicates whether the primary mouse button is pressed.
             * @param   delta   Indicates how many lines should be scrolled for each unit the user rotates the mouse wheel. A positive delta value indicates an upward scroll; a negative value indicates a downward scroll. Typical values are 1 to 3, but faster rotation may produce larger values. This parameter is used only for the MouseEvent.mouseWheel event.
             * @param   commandKey  (AIR only) Indicates whether the Command key is activated (Mac only). This parameter is used only for the MouseEvent.click,
             *   MouseEvent.mouseDown, MouseEvent.mouseUp, MouseEvent.middleClick, MouseEvent.middleMouseDown,
             *   MouseEvent.middleMouseUp, MouseEvent.rightClick, MouseEvent.rightMouseDown, MouseEvent.rightMouseUp,
             *   and MouseEvent.doubleClick events. This parameter is for Adobe AIR only; do not set it for Flash Player content.
             * @param   controlKey  (AIR only) Indicates whether the Control or Ctrl key is activated. This parameter is used only for the MouseEvent.click,
             *   MouseEvent.mouseDown, MouseEvent.mouseUp, MouseEvent.middleClick, MouseEvent.middleMouseDown,
             *   MouseEvent.middleMouseUp, MouseEvent.rightClick, MouseEvent.rightMouseDown, MouseEvent.rightMouseUp,
             *   and MouseEvent.doubleClick events. This parameter is for Adobe AIR only; do not set it for Flash Player content.
             * @param   clickCount  (AIR only) Indicates whether or not the mouse event is part of a multi-click sequence. This parameter will be zero for all mouse events other than
             *   MouseEvent.mouseDown, MouseEvent.mouseUp, MouseEvent.middleMouseDown, MouseEvent.middleMouseUp,
             *   MouseEvent.rightMouseDown and MouseEvent.rightMouseUp. Listening for single clicks, double clicks, or any multi-click sequence
             *   is possible with the clickCount parameter. This parameter is for Adobe AIR only; do not set it for Flash Player content.
             * @langversion 3.0
             * @playerversion   AIR 1.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            MouseEvent(std::string type, bool bubbles   =true, bool cancelable   =false, float localX =NULL, float localY =NULL, InteractiveObject *relatedObject=NULL, bool ctrlKey   =false, bool altKey   =false, bool shiftKey   =false, bool buttonDown   =false, int delta=0);

            /**
             * Creates a copy of the MouseEvent object and sets the value of each property to match that of the original.
             * @return  A new MouseEvent object with property values that match those of the original.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            flash::events::Event *clone();

            /**
             * Returns a string that contains all the properties of the MouseEvent object. The string is in the following format:
             * [MouseEvent type=value bubbles=value cancelable=value ... delta=value]
             * @return  A string that contains all the properties of the MouseEvent object.
             * @langversion 3.0
             * @playerversion   Flash 9
             * @playerversion   Lite 4
             */
        public:
            std::string toString();

            /**
             * Instructs Flash Player or Adobe AIR to render after processing of this event completes, if the display list has been modified.
             * @langversion 3.0
             * @playerversion   Flash 9
             */
        public:
            void     updateAfterEvent();
        };
    }
}

#endif // FLEX11_6_FLASH_EVENTS_MOUSEEVENT_AS
#endif // __cplusplus

