

#include "HTTPStatusEvent.h"
#include "flash/events/Event.h"

    /// @eventType  flash.events.HTTPStatusEvent.HTTP_RESPONSE_STATUS

using namespace flash::events;

namespace flash {
namespace events {


        /**
         * The HTTPStatusEvent.HTTP_STATUS constant defines the value of the 
         * type property of a httpStatus event object.
         * 
         *   This event has the following properties:PropertyValuebubblesfalsecancelablefalse; there is no default behavior to cancel.currentTargetThe object that is actively processing the Event 
         * object with an event listener.statusThe HTTP status code returned by the server.targetThe network object receiving an HTTP status code.
         * @langversion 3.0
         * @playerversion   Flash 9
         * @playerversion   Lite 4
         */
        const std::string HTTPStatusEvent::HTTP_STATUS   = "httpStatus";

        /**
         * Unlike the httpStatus event, the httpResponseStatus event is 
         * delivered before any response data. Also, the httpResponseStatus event includes 
         * values for the responseHeaders and responseURL properties (which are 
         * undefined for an httpStatus event. Note that the httpResponseStatus event
         * (if any) will be sent before (and in addition to) any complete or error 
         * event.
         * 
         *   The HTTPStatusEvent.HTTP_RESPONSE_STATUS constant defines the value of the 
         * type property of a httpResponseStatus event object. This event has the following properties:PropertyValuebubblesfalsecancelablefalse; there is no default behavior to cancel.currentTargetThe object that is actively processing the Event 
         * object with an event listener.responseURLThe URL from which the response was returned.responseHeadersThe response headers that the response returned, 
         * as an array of URLRequestHeader objects.statusThe HTTP status code returned by the server.targetThe network object receiving an HTTP status code.
         * @langversion 3.0
         * @playerversion   AIR 1.0
         * @playerversion   Lite 4
         */
        const std::string HTTPStatusEvent::HTTP_RESPONSE_STATUS   = "httpResponseStatus";

        /**
         * The HTTP status code returned by the server. For example, a value of 404 indicates that the server
         * has not found a match for the requested URI. HTTP status codes can be found in sections 10.4 and 10.5
         * of the HTTP specification at
         * http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html.
         * 
         *   If Flash Player or AIR cannot get a status code from the 
         * server, or if it cannot communicate with the server, the default value of 0 is passed to your code. 
         * A value of 0 can be generated in any player (for example, 
         * if a malformed URL is requested), and a value of 0 is always generated by the Flash Player plug-in 
         * when it is run in the following browsers, which do not pass HTTP status codes to the player: 
         * Netscape, Mozilla, Safari, Opera, and Internet Explorer for the Macintosh.
         * @langversion 3.0
         * @playerversion   Flash 9
         * @playerversion   Lite 4
         */
        int HTTPStatusEvent::status()      ;

        /**
         * The URL that the response was returned from. In the case of redirects, this will be different 
         * from the request URL.
         * @langversion 3.0
         * @playerversion   AIR 1.0
         * @playerversion   Lite 4
         */
        std::string HTTPStatusEvent::responseURL()         ;
        void HTTPStatusEvent::responseURL(std::string value)       ;

        /**
         * The response headers that the response returned, as an array of URLRequestHeader objects.
         * @langversion 3.0
         * @playerversion   AIR 1.0
         * @playerversion   Lite 4
         */
        std::vector<void*> HTTPStatusEvent::responseHeaders()        ;
        void HTTPStatusEvent::responseHeaders(std::vector<void*> value)       ;

        /**
         * Creates a copy of the HTTPStatusEvent object and sets the value of each property to match that of the original.
         * @return  A new HTTPStatusEvent object with property values that match those of the original.
         * @langversion 3.0
         * @playerversion   Flash 9
         * @playerversion   Lite 4
         */
        flash::events::Event* HTTPStatusEvent::clone()                     ;

        /**
         * Creates an Event object that contains specific information about HTTP status events.
         * Event objects are passed as parameters to event listeners.
         * @param   type    The type of the event. Event listeners can access this information through the inherited type property. There is only one type of HTTPStatus event: HTTPStatusEvent.HTTP_STATUS.
         * @param   bubbles Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited bubbles property.
         * @param   cancelable  Determines whether the Event object can be canceled. Event listeners can access this information through the inherited cancelable property.
         * @param   status  Numeric status. Event listeners can access this information through the status property.
         * @langversion 3.0
         * @playerversion   Flash 9
         * @playerversion   Lite 4
         */
        HTTPStatusEvent::HTTPStatusEvent(std::string type, bool bubbles, bool cancelable, int status);

        /**
         * Returns a string that contains all the properties of the HTTPStatusEvent object. The string is in the following format:
         * [HTTPStatusEvent type=value bubbles=value cancelable=value status=value]
         * @return  A string that contains all the properties of the HTTPStatusEvent object.
         * @langversion 3.0
         * @playerversion   Flash 9
         * @playerversion   Lite 4
         */
        std::string HTTPStatusEvent::toString()         ;
}
}

